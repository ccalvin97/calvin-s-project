# -*- coding: utf-8 -*-
"""personality_vfinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wPJsYIXqlKG3wggHbGrGccTZ2eNMTts2
"""

import pdb 
import os
import random
import numpy as np
import scipy.stats as ss
import pandas as pd
import warnings
from tensorflow.python.keras.utils import Sequence  # pylint: disable-msg=E0611
from tensorflow.python.keras.callbacks import Callback, ModelCheckpoint  # pylint: disable-msg=E0611
from tensorflow.python.keras import backend as K  # pylint: disable-msg=E0611
from tensorflow.python.keras.preprocessing.text import text_to_word_sequence  # pylint: disable-msg=E0611
from tensorflow import ConfigProto, Session, map_fn, float32, is_finite, boolean_mask
from tensorflow.contrib.metrics import streaming_pearson_correlation
from tensorflow.contrib.saved_model import save_keras_model
from tensorflow.python.keras.models import save_model  # pylint: disable-msg=E0611
from numpy.random import choice
np.random.seed(1)
import tensorflow as tf
from tensorflow.python.keras import optimizers

from tensorflow.python.keras import initializers, regularizers, constraints
from tensorflow.python.keras.models import Model
from tensorflow.python.keras.layers.embeddings import Embedding
from tensorflow.python.keras.preprocessing import sequence
from tensorflow.python.keras.initializers import glorot_uniform
from tensorflow.python.keras.utils import np_utils
from tensorflow.python.keras.callbacks import EarlyStopping
from nltk.corpus import stopwords
np.random.seed(1)
import matplotlib.pyplot as plt
from tensorflow.python.keras.layers import (
    Dense, Input, LSTM, Embedding, Dropout, Activation, Bidirectional, Layer)
from tensorflow.python.keras.layers.merge import concatenate
from tensorflow.python.keras.models import Model
from tensorflow.python.keras.layers.normalization import BatchNormalization
from tensorflow.python.keras.models import Sequential
from tensorflow.keras import backend as K
from tensorflow.python.keras import initializers, regularizers, constraints
os.environ["CUDA_VISIBLE_DEVICES"] = "0"

trainScores, valScores, testScores = score_reader.split_train_test(0.9,0.6)

train_df = pd.read_csv('/u02/datasets/psytesting/scores_combined.csv',encoding="latin-1")
train_df.head()

embeddings = Embeddings(
    glove_path='/home/calvin/glove.6B.50d.txt',
    cv_directory='/u02/texts/', maxlen=maxlen,
    lower=True)

read_embeddings=embeddings.read_embeddings('/home/calvin/glove.6B.50d.txt')


training_generator = CV2EmbeddingDataGenerator(
    trainScores, embeddings.embedding, maxlen=maxlen,
    batch_size=batch_size
)

val_generator = CV2EmbeddingDataGenerator(
    valScores, embeddings.embedding, maxlen=maxlen,
    batch_size=batch_size
)

from tensorflow.keras import backend as K
from tensorflow.python.keras import initializers, regularizers, constraints
from tensorflow.contrib.keras.api.keras.models import Sequential
from tensorflow.python.keras.layers import Layer
import tensorflow as tf

import random
def dot_product(x, kernel):
    """
    Wrapper for dot product operation, in order to be compatible with both
    Theano and Tensorflow
    Args:
        x (): input
        kernel (): weights
    Returns:
    """
    if K.backend() == 'tensorflow':
        return K.squeeze(K.dot(x, K.expand_dims(kernel)), axis=-1)
    else:
        return K.dot(x, kernel)

class AttentionWithContext(Layer):
    """
    Attention operation, with a context/query vector, for temporal data.
    Supports Masking.
    Follows the work of Yang et al. [https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf]
    "Hierarchical Attention Networks for Document Classification"
    by using a context vector to assist the attention
    # Input shape
        3D tensor with shape: `(samples, steps, features)`.
    # Output shape
        2D tensor with shape: `(samples, features)`.
    How to use:
    Just put it on top of an RNN Layer (GRU/LSTM/SimpleRNN) with return_sequences=True.
    The dimensions are inferred based on the output shape of the RNN.
    Note: The layer has been tested with Keras 2.0.6
    Example:
        model.add(LSTM(64, return_sequences=True))
        model.add(AttentionWithContext())
        # next add a Dense layer (for classification/regression) or whatever...
    """
 
    def __init__(self,
                 W_regularizer=None, u_regularizer=None, b_regularizer=None,
                 W_constraint=None, u_constraint=None, b_constraint=None,
                 bias=True, **kwargs):
 
        self.supports_masking = True
        self.init = initializers.get('glorot_uniform')
 
        self.W_regularizer = regularizers.get(W_regularizer)
        self.u_regularizer = regularizers.get(u_regularizer)
        self.b_regularizer = regularizers.get(b_regularizer)
 
        self.W_constraint = constraints.get(W_constraint)
        self.u_constraint = constraints.get(u_constraint)
        self.b_constraint = constraints.get(b_constraint)
 
        self.bias = bias
        super(AttentionWithContext, self).__init__(**kwargs)
 
    def build(self, input_shape):
        input_shape_ints = input_shape.as_list()
        assert len(input_shape) == 3
 
        self.W = self.add_weight(
            shape=(input_shape_ints[-1], input_shape_ints[-1],),
            initializer=self.init,
            regularizer=self.W_regularizer,
            constraint=self.W_constraint,
            name=self.name + '_W'
        )
        if self.bias:
            self.b = self.add_weight(
                shape=(input_shape_ints[-1],),
                initializer='zero',
                regularizer=self.b_regularizer,
                constraint=self.b_constraint,
                name=self.name + '_b'
            )
 
        self.u = self.add_weight(
            shape=(input_shape_ints[-1],),
            initializer=self.init,
            regularizer=self.u_regularizer,
            constraint=self.u_constraint,
            name=self.name + '_u'
        )
 
        super(AttentionWithContext, self).build(input_shape)
 
    def compute_mask(self, input, input_mask=None):
        # do not pass the mask to the next layers
        return None
 
    def call(self, x, mask=None):
        uit = dot_product(x, self.W)
 
        if self.bias:
            uit += self.b
 
        uit = K.tanh(uit)
        ait = dot_product(uit, self.u)
 
        a = K.exp(ait)
 
        # apply mask after the exp. will be re-normalized next
        if mask is not None:
            # Cast the mask to floatX to avoid float64 upcasting in theano
            a *= K.cast(mask, K.floatx())
 
        # in some cases especially in the early stages of training the sum may be almost zero
        # and this results in NaN's. A workaround is to add a very small positive number Îµ to the sum.
        # a /= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx())
        a /= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())
 
        a = K.expand_dims(a)
        weighted_input = x * a
        return K.sum(weighted_input, axis=1)
 
    def compute_output_shape(self, input_shape):
        return input_shape[0], input_shape[-1]

# def use_cpu(use_gpu=False, num_cores=4):
#     '''switch on or off the use of GPU for computations
#     '''
#     if use_gpu:
#         num_gpu = 1
#         num_cpu = 1
#     else:  # CPU
#         num_cpu = 10
#         num_gpu = 0

#     config = ConfigProto(intra_op_parallelism_threads=num_cores,\
#             inter_op_parallelism_threads=num_cores, allow_soft_placement=True,\
#             device_count = {'CPU' : num_cpu, 'GPU' : num_gpu})
#     session = Session(config=config)
#     K.set_session(session)
    
# use_cpu()


# os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"   # see issue #152
# os.environ["CUDA_VISIBLE_DEVICES"] = ""

tf.reset_default_graph()
tf.keras.backend.clear_session()
from tensorflow.contrib.metrics import streaming_pearson_correlation

# Design model
model = Sequential()
model.add(Bidirectional(LSTM(units=128,return_sequences=True, dropout=0.3,recurrent_dropout=0.3),
                        input_shape=(None,embeddings.embedding[0].size)))
model.add(Bidirectional(LSTM(units=64,return_sequences=True, dropout=0.3,recurrent_dropout=0.3),
                        input_shape=(None,embeddings.embedding[0].size)))
model.add(AttentionWithContext())
model.add(Dense(64, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Dense(50, activation='relu'))
model.add(Dense(31, activation=None))


def rmse_nan(y_true, y_pred):
    index = tf.math.is_nan(y_true)
    y_true = boolean_mask(y_true, index)
    y_pred = boolean_mask(y_pred, index)
    return K.sqrt(K.mean((y_true - y_pred) ** 2))

def filter_nans(y_true2, y_pred2):
    '''filter out nan values
    '''
    bool_finite = is_finite(y_true2)
    y_true = boolean_mask(y_true2, bool_finite)
    y_pred = boolean_mask(y_pred2, bool_finite)
    return y_true, y_pred

def nanmse(y_true2, y_pred2):
    y_true, y_pred = filter_nans(y_true2, y_pred2)
    return K.mean(K.square(y_pred - y_true), axis=-1)



def tf_pearson(y_true, y_pred):
    return tf.contrib.metrics.streaming_pearson_correlation(y_pred, y_true)[1]


model.compile(
    loss=rmse_nan,
    optimizer=adam,metrics=[tf_pearson])
# adam=optimizers.adam(lr=0.0005)
# model.compile(loss=nanmse, optimizer=adam)



model.summary()

history=model.fit_generator(
    generator=training_generator,
    use_multiprocessing=True,
    workers=1, epochs=20, 
    validation_data=val_generator,
)

# model.fit_generator(generator=training_generator.data_generation_NN(batch_size),
#                 use_multiprocessing=True,
#                 workers=30, epochs=10, steps_per_epoch=training_generator.__len__(), 
#                validation_data=val_generator.data_generation_NN(batch_size),
#                 validation_steps=val_generator.__len__())
    
#     model_performance.append((i, errors))
#     i=i+1

# saved_to_path = tf.contrib.saved_model.save_keras_model(
#       model, '/home/calvin/model_v14-new_keras.hdf5')

# saved_to_path = tf.contrib.saved_model.save_keras_model(
#       model, '/home/calvin/model_v14-new_keras')
model.save_weights( '/home/calvin/model_v14-new_keras.hdf5')

model.load_weights('/home/calvin/model_v14-new_keras.hdf5', by_name=False)

history=model.fit_generator(
    generator=training_generator,
    use_multiprocessing=True,
    workers=1, epochs=20, 
    validation_data=val_generator,
)

print(history.history.keys())
# summarize history for accuracy
# plt.plot(history.history['acc'])
# plt.plot(history.history['val_acc'])
# plt.title('model validation accuracy')
# plt.ylabel('accuracy')
# plt.xlabel('epoch')
# plt.legend(['train', 'val'], loc='upper left')
# plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model validation loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

test_generator = CV2EmbeddingDataGenerator(
    testScores, embeddings.embedding, maxlen=maxlen,
    batch_size=batch_size)

scoreSeg = model.evaluate_generator(test_generator.data_generation_NN(batch_size), test_generator.__len__())

print("loss = ",scoreSeg)

# pearson=nanpearson(testScores[:][1],score_pearson)
def pearson_r(x, y):
    """Compute Pearson correlation coefficient between two arrays."""

    # Compute correlation matrix
    corr_mat = np.corrcoef(x, y)

    # Return entry [0,1]
    return corr_mat

aa=[testScores[1] for testScores in testScores]
print(np.array(aa).T.shape)
# print(np.array(np.array(aa))[:17152][2])
print(np.array(score_pearson)[2])

# pearson_a=pearson_r(np.array(aa)[:17152].T, np.array(score_pearson).T)
aaa=np.array(aa)[:17152].T
bbb=np.array(score_pearson).T
print(aaa[1,:].shape)
print(bbb.shape)

pearson_res=[]
# www=pd.Series(aaaxxxbbb:]
# eee=pd.Series(bbb[2,:])
for i in range(31):
    pearson_res.append(pd.Series(aaa[i,:]).corr(pd.Series(bbb[i,:])))



model.save_weights( '/home/calvin/model_v14-new_keras.hdf5')

model.load_weights('/home/calvin/model_v14-new_keras.hdf5', by_name=False)

from keras.models import load_model
model.save('/home/calvin/model_v14-baseline.h5')

from keras.utils import CustomObjectScope
from keras.initializers import glorot_uniform
from tensorflow.keras.models import load_model

model = load_model('/home/calvin/model_v14-baseline.h5', 
                   custom_objects={'AttentionWithContext': AttentionWithContext,'nanmse' : nanmse})

1e-5/4

